rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // 1. Products Collection: Read by anyone
    // Allows any user (authenticated or unauthenticated) to read product data.
    // All write operations (create, update, delete) are implicitly denied for this path.
    match /products/{productId} {
      allow read: if true;
    }

    // 2. Users Collection: Specific access for user profiles
    // Users can create their own user document (isGuest: true for anonymous, isGuest: false for email/password).
    // Users can read their own user document.
    // Users can update their own user document (e.g., changing profile info), but they CANNOT change their 'isGuest' status
    // once it's initially set. This prevents a guest from claiming to be a registered user without proper signup.
    // Deletion of user documents is denied.
    match /users/{userId} {
      allow create: if request.auth.uid == userId;
      allow read: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId && !(request.resource.data.isGuest is bool);
      allow delete: if false; // Users cannot delete their own profile via client-side
    }

    // 3. Guest Counter Document: TEMPORARY for sequential guest ID generation
    // WARNING: This rule allows ANY client (authenticated or unauthenticated) to read and update
    // the 'guestCounter' document. This is INSECURE for a production environment.
    // For a production application, updating this counter should ONLY be done via a secure
    // Cloud Function using the Firebase Admin SDK to prevent abuse and race conditions.
    match /settings/guestCounter {
      allow read, update: if true;
    }

    // 4. User-Specific Subcollections: cart, wishlist, orders
    // This crucial rule allows an authenticated user to perform read and write operations
    // only within their own subcollections ('cart', 'wishlist', 'orders') under their
    // specific user document.
    // This is vital for saving and retrieving cart items, wishlist items, and past orders.
    match /users/{userId}/{collectionName}/{docId} {
      allow read, write: if request.auth.uid == userId;
    }

    // 5. Catch-all Rule: Deny everything else by default
    // This acts as a safety net, ensuring that any collections or documents not explicitly
    // allowed by the rules above are denied for both read and write operations.
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}
